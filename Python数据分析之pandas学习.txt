Python  数据分析资源
http://www.cnblogs.com/nxld/p/6058591.html
http://www.cnblogs.com/nxld/p/6058998.html

Python中的pandas模块进行数据分析    

接下来pandas介绍中将学习到如下8块内容：   
1、数据结构简介：DataFrame和Series   
2、数据索引index  
3、利用pandas查询数据  
4、利用pandas的DataFrames进行统计分析  
5、利用pandas实现SQL操作  
6、利用pandas进行缺失值的处理  
7、利用pandas实现Excel的数据透视表功能  
8、多层索引的使用  


第一条 pandas 常用的数据结构  ，series  and  dataFrame    

 series  --->  类似于numpy 中的一维数组   
 dF      --->  类似二维数组 
 
 
如何创建序列 Series ：
通过一维数组创建序列 ： 
c:\Python\Python35\Scripts>python
Python 3.5.4 (v3.5.4:3f56838, Aug  8 2017, 02:17:05) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy as np,pandas as pd
>>> arr1=np.arange(10)
>>> arr1
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> s1 =pd.Series(arr1)
>>> s1
0    0
1    1
2    2
3    3
4    4
5    5
6    6
7    7
8    8
9    9
dtype: int32
>>> type(s1)
<class 'pandas.core.series.Series'>

通过字典方式创建序列 

>>> dic1 = {'a':10,'b':12,'c':13}
>>> dic1
{'c': 13, 'b': 12, 'a': 10}
>>> type(dic1)
<class 'dict'>
>>> s2= pd.Series(dic1)
>>> s2
a    10
b    12
c    13
dtype: int64
>>>





dataframe
通过二维数组创建数据框 

>>> arr2 = np.array(np.arange(12)).reshape(4,3)
>>> arr2
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])
>>> type(arr2)
<class 'numpy.ndarray'>
>>> df1=pd.DataFrame(arr2)
>>> df1
   0   1   2
0  0   1   2
1  3   4   5
2  6   7   8
3  9  10  11
>>> type(df1)
<class 'pandas.core.frame.DataFrame'>



通过字典方式创建数据框 

通过字典列表 
>>> dic2 = {'a':[1,2,3,4],'b':[5,6,7,8], 'c':[9,10,11,12],'d':[13,14,15,16]}
>>> dic2
{'c': [9, 10, 11, 12], 'b': [5, 6, 7, 8], 'd': [13, 14, 15, 16], 'a': [1, 2, 3, 4]}
>>> type(dic2)
<class 'dict'>
>>> df2=pd.DataFrame(dic2)
>>> df2
   a  b   c   d
0  1  5   9  13
1  2  6  10  14
2  3  7  11  15
3  4  8  12  16


字典嵌套 


>>> dic3 = {'one':{'a':1,'b':2,'c':3,'d':4}, 'two':{'a':5,'b':6,'c':7,'d':8}, 'three':{'a':9,'b':10,'c':11,'d':12}}
>>> dic2
{'c': [9, 10, 11, 12], 'b': [5, 6, 7, 8], 'd': [13, 14, 15, 16], 'a': [1, 2, 3, 4]}
>>> dic3
{'two': {'c': 7, 'b': 6, 'd': 8, 'a': 5}, 'one': {'c': 3, 'b': 2, 'd': 4, 'a': 1}, 'three': {'c': 11, 'b': 10, 'd': 12, 'a': 9}}
>>> df3=pd.DataFrame(dic3)
>>> df3
   one  three  two
a    1      9    5
b    2     10    6
c    3     11    7
d    4     12    8
>>> type(df3)
<class 'pandas.core.frame.DataFrame'>

数据框到数据框 ----> index  (索引)  


>>> df4=df3[['one','two']]
>>> df4
   one  two
a    1    5
b    2    6
c    3    7
d    4    8
>>> type(df4)
<class 'pandas.core.frame.DataFrame'>
>>>


二  数据索引  

这个地方的数据索引是 dataframe 里面 ，最左侧的一列值

>>> s4 = pd.Series(np.array([1,2,1,3,5,8]))
>>> s4
0    1
1    2
2    1
3    3
4    5
5    8
dtype: int32
>>> s4.index=['a','b','c','d','e','f']    # 虽然index  重新 复制了 ，但是 索引值依然存在 0  ~   5  
>>> s4
a    1
b    2
c    1
d    3
e    5
f    8
dtype: int32
>>> s4[0]
1
>>> s4[5]
8
>>> s4['e']
5
>>> s4[[1,2,3,4]]
b    2
c    1
d    3
e    5
dtype: int32
>>>

序列算术运算 

自动化对齐  这是 毛线    。。。。。  ----->把索引自动化补全 但是对应的数据 NaN


>>> s5 = pd.Series(np.array([10,15,20,30,55,80]),index = ['a','b','c','d','e','f'])
>>> s5
a    10
b    15
c    20
d    30
e    55
f    80
dtype: int32
>>> s6 = pd.Series(np.array([12,11,13,15,14,16]),index = ['a','c','g','b','d','f'])
>>> s6
a    12
c    11
g    13
b    15
d    14
f    16
dtype: int32
>>> s5 + s6
a    22.0
b    30.0
c    31.0
d    44.0
e     NaN
f    96.0
g     NaN
dtype: float64
>>> s5/s6
a    0.833333
b    1.000000
c    1.818182
d    2.142857
e         NaN
f    5.000000
g         NaN
dtype: float64
>>>



三 利用pandas  查询数据 

导入数据集 

C:\\Users\\IBM_ADMIN\\Desktop\\cognos\\python\\python_anayslsl\\3Q20179.12.17fiscal_wkforIDS.csv



>>> dimnsn = pd.io.parsers.read_csv('C:\\Users\\IBM_ADMIN\\Desktop\\cognos\\python\\python_anayslsl\\3Q20179.12.17fiscal_wkforIDS.csv')
>>> dimnsn.head()
     END_DATE  FISCAL_WK_OF_QTR  FISCAL_QTR  FISCAL_YR
0  2016-10-09                 1           4       2016
1  2016-10-11                 2           4       2016
2  2016-10-18                 3           4       2016
3  2016-10-25                 4           4       2016
4  2016-11-01                 5           4       2016
>>> dimnsn.tail()
      END_DATE  FISCAL_WK_OF_QTR  FISCAL_QTR  FISCAL_YR
91  2018-07-03                 1           3       2018
92  2018-07-10                 2           3       2018
93  2018-07-17                 3           3       2018
94  2018-07-24                 4           3       2018
95  2018-07-31                 5           3       2018
>>> dimnsn.ix[[0,2,4,5,7]]
     END_DATE  FISCAL_WK_OF_QTR  FISCAL_QTR  FISCAL_YR
0  2016-10-09                 1           4       2016
2  2016-10-18                 3           4       2016
4  2016-11-01                 5           4       2016
5  2016-11-08                 6           4       2016
7  2016-11-22                 8           4       2016
>>> dimnsn.ix[[0]]
     END_DATE  FISCAL_WK_OF_QTR  FISCAL_QTR  FISCAL_YR
0  2016-10-09                 1           4       2016
>>> dimnsn.ix[0]
END_DATE            2016-10-09
FISCAL_WK_OF_QTR             1
FISCAL_QTR                   4
FISCAL_YR                 2016
Name: 0, dtype: object
>>> dimnsn[['END_DATE','FISCAL_YR']]




四 统计分析 


描述性 统计分析 ，总和 ，均值 ，最大 ，最小  


>>> np.random.seed(12323)
>>> d1 =pd.Series(2*np.random.normal(size =100 ) + 3)



五 类似于sql 的操作 

dic1 = {'Name':['AAAA','FFFFFFF'],'Sex':['M','F'],'Age':[27,23],'Height':[165.7,167.2],'Weight':[61,63]}


六  缺失值处理 



七  数据透视表 

八  多层索引的使用
